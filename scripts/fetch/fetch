#!/bin/sh
# -*- scheme -*-
prefix="/usr"
exec_prefix="/usr"
exec ${GUILE:-/usr/bin/guile} $GUILE_FLAGS -e '(@@ (fetch) main)' -s "$0" "$@"
!#

;;;; fetch --- running scripts bundled with Geomacs
;;;; Andy Wingo <wingo@pobox.com> --- April 2009
;;;; 
;;;; 	Copyright (C) 2009, 2010, 2011, 2013 Free Software Foundation, Inc.
;;;; 
;;;; This library is free software; you can redistribute it and/or
;;;; modify it under the terms of the GNU Lesser General Public
;;;; License as published by the Free Software Foundation; either
;;;; version 3 of the License, or (at your option) any later version.
;;;; 
;;;; This library is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;;;; Lesser General Public License for more details.
;;;; 
;;;; You should have received a copy of the GNU Lesser General Public
;;;; License along with this library; if not, write to the Free
;;;; Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
;;;; Boston, MA 02110-1301 USA

(define-module (fetch)
  #:use-module (ice-9 getopt-long)
  #:use-module (ice-9 command-line)
  #:autoload (ice-9 format) (format))

;; The User Config File, this can be set in the .guile config file.
(define fetch-config 
  (cond 
   ((file-exists? (string-append (getenv "HOME") "/.fetch.conf"))
    (string-append (getenv "HOME") "/.fetch.conf"))
   ((file-exists? (string-append (getenv "HOME") "/.fetch.scm"))
    (string-append (getenv "HOME") "/.fetch.scm"))
   (else
    (string-append (getenv "HOME") "/.fetch"))))

;; Hack to provide scripts with the bug-report address.
(module-define! the-scm-module
                '%guile-bug-report-address
                "bug-guile@gnu.org")

(define fetch-version "0.0.1")
(define *option-grammar*
  '((help (single-char #\h))
    (version (single-char #\v))))

(define (display-version)
  (version-etc "fetch    "
               fetch-version
	       #:copyright-holder "Matthew Love"
	       #:copyright-year 2018
               #:command-name "fetch"
               #:license *LGPLv3+*))

(define (find-script s)
  (resolve-module (list 'geographic 'scripts 'fetch (string->symbol s)) #:ensure #f))

(define (main args)
  (if (defined? 'setlocale)
      (catch 'system-error
        (lambda ()
          (setlocale LC_ALL ""))
        (lambda args
          (format (current-error-port)
                  "warning: failed to install locale: ~a~%"
                  (strerror (system-error-errno args))))))

  (set-current-module (resolve-module '(fetch fetch)))
  (if (file-exists? fetch-config)
      (load fetch-config))
  (let* ((options (getopt-long args *option-grammar*
                               #:stop-at-first-non-option #t))
         (args (option-ref options '() '())))
    (cond
     ((option-ref options 'help #f)
      (apply (module-ref (resolve-module '(geographic scripts fetch help)) 'main) args)
      (exit 0))
     ((option-ref options 'version #f)
      (display-version)
      (exit 0))
     ((find-script (if (null? args) "help" (car args)))
      => (lambda (mod)
           (exit (apply (module-ref mod 'main) (if (null? args)
                                                   '()
                                                   (cdr args))))))
     (else
      (format (current-error-port)
              "fetch: unknown script ~s~%" (car args))
      (format (current-error-port)
              "Try `fetch help' for more information.~%")
      (exit 1)))))
