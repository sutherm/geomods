#!/usr/bin/env python
### dcfetch.py
##
## Copyright (c) 2018 Matthew Love <matthew.love@colorado.edu>
##
## Permission is hereby granted, free of charge, to any person obtaining a copy 
## of this software and associated documentation files (the "Software"), to deal 
## in the Software without restriction, including without limitation the rights 
## to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies 
## of the Software, and to permit persons to whom the Software is furnished to do so, 
## subject to the following conditions:
##
## The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
## INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
## PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE 
## FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
## ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
##
### Description:
##
## Access elevation data from NOAA's Digital Coast.
##
### Code:

import os
import sys
import ftplib
import urllib2
from xml.dom import minidom
import csv

try:
    import osgeo.ogr as ogr
except ImportError:
    try:
        import ogr
    except ImportError:
        sys.exit('''
fetch: Sorry: You must have the Python GDAL/OGR bindings for OGR support,
Get them here: http://trac.osgeo.org/gdal/wiki/GdalOgrInPython''')

_version = '0.0.4'

_license = """
version %s
Copyright (c) 2018 Matthew Love <matthew.love@colorado.edu>

Permission is hereby granted, free of charge, to any person obtaining a copy 
of this software and associated documentation files (the "Software"), to deal 
in the Software without restriction, including without limitation the rights 
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies 
of the Software, and to permit persons to whom the Software is furnished to do so, 
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE 
FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    """ %(_version)

_usage = """

dcfetch.py [-region xmin xmax ymin ymax] [-list-only]

Options:
  -region\tSpecifies the desired input region; xmin xmax ymin ymax
  -list-only\tOutput a list of urls

  -update\tRe-generate the digital-coast survey vector
  -help\t\tPrint the usage text
  -version\tPrint the version information

Example:
dcfetch.py -region -90.75 -88.1 28.7 31.25

dcfetch.py v.%s
""" %(_version)

_dc_ftp_url_full = "ftp://coast.noaa.gov"
_dc_ftp_url = "coast.noaa.gov"

fetchdata = "@fetchdir@"
if "/" not in fetchdata:
    fetchdata = ""

class dc_bounds:
    def __init__(self, extent=None, list_only=False):
        self.dcftp = dc_ftp()
        self._bounds = extent
        self._lst_only = list_only
        self.surveys = []
        if extent is None: self._update()
        else: self._boundsGeom = self._bounds2geom(self._bounds)

    def _bounds2geom(self, bounds):
        b1 = [[bounds[2], bounds[0]],
              [bounds[2], bounds[1]],
              [bounds[3], bounds[1]],
              [bounds[3], bounds[0]],
              [bounds[2], bounds[0]]]
        return ogr.CreateGeometryFromWkt(self.create_polygon(b1))
        
    def _append_list(self, dataset_id, survey_xml, survey_url):
        this_bounding = self.dcftp._get_xml_extents(survey_xml)
        this_title = self.dcftp._get_xml_title(survey_xml)
        this_pdate = self.dcftp._get_xml_pubdate(survey_xml)
        s_entry = [dataset_id, this_title, this_bounding, survey_url, this_pdate]
        print("dcfetch: appending %s" %(s_entry[1]))
        self.surveys.append(s_entry)

    def _update(self, update = True):
        if update:
            gmt1 = ogr.GetDriverByName('GMT').Open(fetchdata + "digital_coast.gmt", 0)
            layer = gmt1.GetLayer()
        else: layer = []
        self.filelist = self.dcftp.ftp.nlst()
        print('dcfetch: scanning for surveys')
        for i in self.filelist:
            if i == 'lidar1_z' or i == 'lidar2_z':
                self.dcftp.ftp.cwd(i)
                geoids = self.dcftp.ftp.nlst()
                geoid_dir = self.dcftp.ftp.pwd()
                for geoid in geoids:
                    if geoid == 'geoid12a' or geoid == 'geoid12b':
                        self.dcftp.ftp.cwd(geoid)
                        self.dcftp.ftp.cwd("data")
                        data_dir = self.dcftp.ftp.pwd()
                        datalist = self.dcftp.ftp.nlst()
                        for dataset in datalist:
                            try:
                                self.dcftp.ftp.cwd(dataset)
                                dc_files = self.dcftp.ftp.nlst()
                                for dc_file in dc_files:
                                    if ".xml" in dc_file:
                                        if update:
                                            layer.SetAttributeFilter("ID = '%s'" %dataset)
                                        if len(layer) == 0:
                                            xml_url = _dc_ftp_url_full + self.dcftp.ftp.pwd() + "/" + dc_file
                                            dc_xml = self.dcftp._fetch_xml(xml_url)
                                            self._append_list(dataset, dc_xml, _dc_ftp_url_full + self.dcftp.ftp.pwd() + "/")
                            except: pass
                            self.dcftp.ftp.cwd(data_dir)
                        self.dcftp.ftp.cwd(geoid_dir)
                self.dcftp._home()
        gmt1 = layer = None
        self._update_gmt()
        print('dcfetch: all up-to-date')

    def create_polygon(self, coords):          
        ring = ogr.Geometry(ogr.wkbLinearRing)
        for coord in coords:
            ring.AddPoint(coord[1], coord[0])
        poly = ogr.Geometry(ogr.wkbPolygon)
        poly.AddGeometry(ring)
        return poly.ExportToWkt()

    def _update_gmt(self, update = True):
        if update:
            gmt1 = ogr.GetDriverByName('GMT').Open(fetchdata + "digital_coast.gmt", 1)
            layer = gmt1.GetLayer()
        else:
            ds = ogr.GetDriverByName('GMT').CreateDataSource(fetchdata + "digital_coast.gmt")
            layer = ds.CreateLayer("digital_coast", None, ogr.wkbPolygon)
            layer.CreateField(ogr.FieldDefn('Name', ogr.OFTString))
            layer.CreateField(ogr.FieldDefn('ID', ogr.OFTString))
            layer.CreateField(ogr.FieldDefn('Data', ogr.OFTString))
            layer.CreateField(ogr.FieldDefn('Date', ogr.OFTString))
        for feature in layer:
            layer.SetFeature(feature)
        for i in self.surveys:
            self._add_feature_gmt(layer, i)
        gmt1 = layer = None

    def _add_feature_gmt(self, ogr_layer, survey):
        try:
            geom = self._bounds2geom(survey[2])
            feat = ogr.Feature(ogr_layer.GetLayerDefn())
            feat.SetGeometry(geom)
            feat.SetField("Name", str(survey[1]))
            feat.SetField("ID", str(survey[0]))
            feat.SetField("Data", str(survey[3]))
            feat.SetField("Date", str(survey[4]))
            ogr_layer.CreateFeature(feat)
        except: pass
        feat = geom = None

    def search_gmt(self):
        gmt1 = ogr.Open(fetchdata + "digital_coast.gmt")
        layer = gmt1.GetLayer(0)
        for feature1 in layer:
            geom = feature1.GetGeometryRef()
            if self._boundsGeom.Intersects(geom):
                tile_list = []
                surv_url = feature1.GetField("Data")            
                self.dcftp.ftp.cwd(surv_url.split(".gov")[1])
                datalist = self.dcftp.ftp.nlst()
                for dc_file in datalist:
                    if ".csv" in dc_file:
                        dc_csv = self.dcftp._fetch_csv(surv_url + dc_file)
                        for tile in dc_csv:
                            try:
                                tb = [float(tile[1]),float(tile[2]),float(tile[3]),float(tile[4])]
                                tile_geom = self._bounds2geom(tb)
                                if tile_geom.Intersects(self._boundsGeom):
                                    tile_list.append(tile)
                            except: pass
                    for tile in tile_list:
                        if self._lst_only: print surv_url + os.path.basename(tile[0])
                        else: self.dcftp.fetch_file(tile[0])

class dc_ftp:
    def __init__(self):
        self.ftp = ftplib.FTP(_dc_ftp_url)
        self.ftp.login()
        self.ftp.cwd("/pub/DigitalCoast")
        self.parent = self.ftp.pwd()

    def _home(self):
        self.ftp.cwd(self.parent)

    def _list(self):
        self.ftp.retrlines("LIST")

    def fetch_file(self, filename):
        print "downloading " + self.ftp.pwd() + "/" + filename
        
        dirname = "." + self.ftp.pwd()
        if not os.path.exists(dirname):
            os.makedirs(dirname)
            
        with open(dirname + "/" + os.path.basename(filename), "wb") as local_file:
            self.ftp.retrbinary('RETR %s' % filename, local_file.write)

    def _fetch_res(self, url):
        response = urllib2.urlopen(url)
        results = response.read()
        response.close()
        return results

    def _fetch_xml(self, url):
        return minidom.parseString(self._fetch_res(url))

    def _fetch_csv(self, url):
        csv_results = csv.reader(self._fetch_res(url).split('\n'), delimiter=",")
        return list(csv_results)
        
    def _get_xml_extents(self, xml):
        bounding = xml.getElementsByTagName("bounding")
        for node in bounding:
            wl = node.getElementsByTagName("westbc")[0].firstChild.nodeValue
            el = node.getElementsByTagName("eastbc")[0].firstChild.nodeValue
            sl = node.getElementsByTagName("southbc")[0].firstChild.nodeValue
            nl = node.getElementsByTagName("northbc")[0].firstChild.nodeValue
        return map(float, [wl,el,sl,nl])

    def _get_xml_title(self, xml):
        return xml.getElementsByTagName("title")[0].firstChild.nodeValue

    def _get_xml_pubdate(self, xml):
        return xml.getElementsByTagName("pubdate")[0].firstChild.nodeValue

if __name__ == '__main__':
    
    extent = None
    want_list = False
    want_update = False

    i = 1
    while i < len(sys.argv):
        arg = sys.argv[i]

        if arg == '-region':
            extent = (float(sys.argv[i+1]),float(sys.argv[i+2]),
                      float(sys.argv[i+3]),float(sys.argv[i+4]))
            i = i + 4

        elif arg == '-list-only':
            want_list = True

        elif arg == '-update':
            want_update = True

        elif arg == '-help' or arg == '--help' or arg == '-h':
            print(_usage)
            sys.exit(1)

        elif arg == '-version' or arg == '--version':
            print('dcfetch.py v.%s' %(_version))
            print(mblib._license)
            sys.exit(1)

        else:
            print(_usage)
            sys.exit(1)

        i = i + 1

    if extent is None and want_update is False:
        print(_usage)
        sys.exit(1)

    # --
    dcb = dc_bounds(extent, want_list)
    if not want_update: dcb.search_gmt()
    #--

### End
