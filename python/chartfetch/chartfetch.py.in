#!/usr/bin/env python
### chartlib.py
##
## Copyright (c) 2018 Matthew Love <matthew.love@colorado.edu>
##
## Permission is hereby granted, free of charge, to any person obtaining a copy 
## of this software and associated documentation files (the "Software"), to deal 
## in the Software without restriction, including without limitation the rights 
## to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies 
## of the Software, and to permit persons to whom the Software is furnished to do so, 
## subject to the following conditions:
##
## The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
## INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
## PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE 
## FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
## ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
##
### Code:

import os
import sys
import urllib
import urllib2
from xml.dom import minidom

try:
    import osgeo.ogr as ogr
except ImportError:
    try:
        import ogr
    except ImportError:
        sys.exit('''
fetch: Sorry: You must have the Python GDAL/OGR bindings for Shapefile support,
Get them here: http://trac.osgeo.org/gdal/wiki/GdalOgrInPython''')

_version = '0.1.1'

_license = """
version %s
Copyright (c) 2018 Matthew Love <matthew.love@colorado.edu>

Permission is hereby granted, free of charge, to any person obtaining a copy 
of this software and associated documentation files (the "Software"), to deal 
in the Software without restriction, including without limitation the rights 
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies 
of the Software, and to permit persons to whom the Software is furnished to do so, 
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE 
FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    """ %(_version)

_usage = """

chartfetch.py [-region xmin xmax ymin ymax] [-list-only]

Options:
  -region\tSpecifies the desired input region; xmin xmax ymin ymax
  -list-only\tOutput a list of urls

  -update\tRe-generate the chart survey vector
  -help\t\tPrint the usage text
  -version\tPrint the version information

Example:
chartfetch.py -region -90.75 -88.1 28.7 31.25

chartfetch.py v.%s 
""" %(_version)

_enc_data_catalog = "http://www.charts.noaa.gov/ENCs/ENCProdCat_19115.xml"
_rnc_data_catalog = "http://www.charts.noaa.gov/RNCs/RNCProdCat_19115.xml"

fetchdata = "@fetchdir@"
if "/" not in fetchdata:
    fetchdata = ""

class charts:
    def __init__(self, extent=None):
        self.bounds = extent
        self.chart_feats = []
        self._results = []
        if extent is None: self._update()
        else: self.bounds2geom()

    def _update(self):
        self.chart_xml = self._fetch_xml(_enc_data_catalog)
        self._parse_xml()
        self.make_gmt()

    def _fetch_xml(self, url):
        print('%s' %(url))
        response = urllib2.urlopen(url)
        results = response.read()
        response.close()

        return minidom.parseString(results)

    def _parse_xml(self):
        xml_ds = self.chart_xml.getElementsByTagName("composedOf")
        for node in xml_ds:
            nv = []
            node_title = node.getElementsByTagName("title")[0].getElementsByTagName("gco:CharacterString")[0].firstChild.nodeValue
            polygon = node.getElementsByTagName("gml:Polygon")[0].getElementsByTagName("gml:LinearRing")[0].getElementsByTagName("gml:pos")
            linkage = node.getElementsByTagName("linkage")[0].getElementsByTagName("URL")[0].firstChild.nodeValue
            for pos in polygon:
                nv.append(map(float, pos.firstChild.nodeValue.split(" ")))
            self.chart_feats.append([node_title, linkage, nv])

    def create_polygon(self, coords):          
        ring = ogr.Geometry(ogr.wkbLinearRing)
        for coord in coords:
            ring.AddPoint(coord[1], coord[0])

        # Create polygon
        poly = ogr.Geometry(ogr.wkbPolygon)
        poly.AddGeometry(ring)
        return poly.ExportToWkt()

    def make_gmt(self):
        driver = ogr.GetDriverByName('GMT')
        ds = driver.CreateDataSource("chartfetch.gmt")
        layer = ds.CreateLayer("chartfetch", None, ogr.wkbPolygon)
        
        layer.CreateField(ogr.FieldDefn('Name', ogr.OFTString))
        defn = layer.GetLayerDefn()

        layer.CreateField(ogr.FieldDefn('Data', ogr.OFTString))
        defn = layer.GetLayerDefn()

        for chfeat in self.chart_feats:
            poly = self.create_polygon(chfeat[2])
            feat = ogr.Feature( layer.GetLayerDefn())
            feat.SetField("Name", str(chfeat[0]))
            feat.SetField("Data", str(chfeat[1]))

            geom = ogr.CreateGeometryFromWkt(poly)
            feat.SetGeometry(geom)
            layer.CreateFeature(feat)
            feat = geom = None  # destroy these

        ds = layer = feat = geom = None

    def bounds2geom(self):
        b1 = [[self.bounds[2], self.bounds[0]],
              [self.bounds[2], self.bounds[1]],
              [self.bounds[3], self.bounds[1]],
              [self.bounds[3], self.bounds[0]],
              [self.bounds[2], self.bounds[0]]]
              
        self.boundsGeom = ogr.CreateGeometryFromWkt(self.create_polygon(b1))

    def fetch_file(self, filename):
        print "downloading " + filename

        self._dirname = "./" + os.path.dirname(filename.split(".gov")[1])
        
        if not os.path.exists(self._dirname):
            os.makedirs(self._dirname)
 
        with open(self._dirname + "/" + os.path.basename(filename), "wb") as local_file:
            f = urllib2.urlopen(filename)
            local_file.write(f.read())
        f.close()

    def print_results(self):
        for row in self._results:
            print(row)

    def fetch_results(self):
        for row in self._results:
            self.fetch_file(row)

    def search_gmt(self):
        gmt1 = ogr.Open(fetchdata + "chartfetch.gmt")
        layer = gmt1.GetLayer(0)
        for feature1 in layer:
            geom = feature1.GetGeometryRef()
            if self.boundsGeom.Intersects(geom):
                self._results.append(feature1.GetField("Data"))

if __name__ == '__main__':
    
    extent = None
    want_list = False
    want_update = False

    i = 1
    while i < len(sys.argv):
        arg = sys.argv[i]

        if arg == '-region':
            extent = (float(sys.argv[i+1]),float(sys.argv[i+2]),
                      float(sys.argv[i+3]),float(sys.argv[i+4]))
            i = i + 4

        elif arg == '-list-only':
            want_list = True

        elif arg == '-update':
            want_update = True

        elif arg == '-help' or arg == '--help' or arg == '-h':
            print(_usage)
            sys.exit(1)

        elif arg == '-version' or arg == '--version':
            print('chartfetch.py v.%s' %(_version))
            print(_license)
            sys.exit(1)

        else:
            print(_usage)
            sys.exit(0)

        i = i + 1

    if extent is None and want_update is False:
        print(_usage)
        sys.exit(1)

    #--
    if want_update: cfr = charts()
    else:
        cfr = charts(extent)

        cfr.search_gmt()
        if want_list: cfr.print_results()
        else: cfr.fetch_results()

    #--

### End
